// Code generated by MockGen. DO NOT EDIT.
// Source: internal/services/user_service/user_service.go

// Package mock_user_service is a generated GoMock package.
package user_storage

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/real013228/social-network/internal/model"
)

// MockuserStorage is a mock of userStorage interface.
type MockuserStorage struct {
	ctrl     *gomock.Controller
	recorder *MockuserStorageMockRecorder
}

// MockuserStorageMockRecorder is the mock recorder for MockuserStorage.
type MockuserStorageMockRecorder struct {
	mock *MockuserStorage
}

// NewMockuserStorage creates a new mock instance.
func NewMockuserStorage(ctrl *gomock.Controller) *MockuserStorage {
	mock := &MockuserStorage{ctrl: ctrl}
	mock.recorder = &MockuserStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockuserStorage) EXPECT() *MockuserStorageMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockuserStorage) CreateUser(ctx context.Context, user model.User) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, user)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockuserStorageMockRecorder) CreateUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockuserStorage)(nil).CreateUser), ctx, user)
}

// GetNotifications mocks base method.
func (m *MockuserStorage) GetNotifications(ctx context.Context, filter model.UsersFilter) ([]model.NotificationPayload, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotifications", ctx, filter)
	ret0, _ := ret[0].([]model.NotificationPayload)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNotifications indicates an expected call of GetNotifications.
func (mr *MockuserStorageMockRecorder) GetNotifications(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotifications", reflect.TypeOf((*MockuserStorage)(nil).GetNotifications), ctx, filter)
}

// GetUserByEmail mocks base method.
func (m *MockuserStorage) GetUserByEmail(ctx context.Context, email string) (model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", ctx, email)
	ret0, _ := ret[0].(model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockuserStorageMockRecorder) GetUserByEmail(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockuserStorage)(nil).GetUserByEmail), ctx, email)
}

// GetUserByID mocks base method.
func (m *MockuserStorage) GetUserByID(ctx context.Context, filter model.UsersFilter) (model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", ctx, filter)
	ret0, _ := ret[0].(model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockuserStorageMockRecorder) GetUserByID(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockuserStorage)(nil).GetUserByID), ctx, filter)
}

// GetUsers mocks base method.
func (m *MockuserStorage) GetUsers(ctx context.Context, filter model.UsersFilter) ([]model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers", ctx, filter)
	ret0, _ := ret[0].([]model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockuserStorageMockRecorder) GetUsers(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockuserStorage)(nil).GetUsers), ctx, filter)
}

// notify mocks base method.
func (m *MockuserStorage) notify(ctx context.Context, userID string, payload model.NotificationPayload) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "notify", ctx, userID, payload)
}

// notify indicates an expected call of notify.
func (mr *MockuserStorageMockRecorder) notify(ctx, userID, payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "notify", reflect.TypeOf((*MockuserStorage)(nil).notify), ctx, userID, payload)
}
