// Code generated by MockGen. DO NOT EDIT.
// Source: cmd/app/resolvers/resolver.go

// Package mock_resolvers is a generated GoMock package.
package mock_resolvers

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/real013228/social-network/internal/model"
)

// MockuserService is a mock of userService interface.
type MockuserService struct {
	ctrl     *gomock.Controller
	recorder *MockuserServiceMockRecorder
}

// MockuserServiceMockRecorder is the mock recorder for MockuserService.
type MockuserServiceMockRecorder struct {
	mock *MockuserService
}

// NewMockuserService creates a new mock instance.
func NewMockuserService(ctrl *gomock.Controller) *MockuserService {
	mock := &MockuserService{ctrl: ctrl}
	mock.recorder = &MockuserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockuserService) EXPECT() *MockuserServiceMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockuserService) CreateUser(ctx context.Context, user model.CreateUserInput) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, user)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockuserServiceMockRecorder) CreateUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockuserService)(nil).CreateUser), ctx, user)
}

// GetNotifications mocks base method.
func (m *MockuserService) GetNotifications(ctx context.Context, filter model.UsersFilter) ([]model.NotificationPayload, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotifications", ctx, filter)
	ret0, _ := ret[0].([]model.NotificationPayload)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNotifications indicates an expected call of GetNotifications.
func (mr *MockuserServiceMockRecorder) GetNotifications(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotifications", reflect.TypeOf((*MockuserService)(nil).GetNotifications), ctx, filter)
}

// GetUserByID mocks base method.
func (m *MockuserService) GetUserByID(ctx context.Context, filter model.UsersFilter) (model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", ctx, filter)
	ret0, _ := ret[0].(model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockuserServiceMockRecorder) GetUserByID(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockuserService)(nil).GetUserByID), ctx, filter)
}

// GetUsers mocks base method.
func (m *MockuserService) GetUsers(ctx context.Context, filter model.UsersFilter) ([]model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers", ctx, filter)
	ret0, _ := ret[0].([]model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockuserServiceMockRecorder) GetUsers(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockuserService)(nil).GetUsers), ctx, filter)
}

// MockpostService is a mock of postService interface.
type MockpostService struct {
	ctrl     *gomock.Controller
	recorder *MockpostServiceMockRecorder
}

// MockpostServiceMockRecorder is the mock recorder for MockpostService.
type MockpostServiceMockRecorder struct {
	mock *MockpostService
}

// NewMockpostService creates a new mock instance.
func NewMockpostService(ctrl *gomock.Controller) *MockpostService {
	mock := &MockpostService{ctrl: ctrl}
	mock.recorder = &MockpostServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockpostService) EXPECT() *MockpostServiceMockRecorder {
	return m.recorder
}

// CreatePost mocks base method.
func (m *MockpostService) CreatePost(ctx context.Context, post model.CreatePostInput) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePost", ctx, post)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePost indicates an expected call of CreatePost.
func (mr *MockpostServiceMockRecorder) CreatePost(ctx, post interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePost", reflect.TypeOf((*MockpostService)(nil).CreatePost), ctx, post)
}

// GetPosts mocks base method.
func (m *MockpostService) GetPosts(ctx context.Context, filter model.PostsFilter) ([]model.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPosts", ctx, filter)
	ret0, _ := ret[0].([]model.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPosts indicates an expected call of GetPosts.
func (mr *MockpostServiceMockRecorder) GetPosts(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPosts", reflect.TypeOf((*MockpostService)(nil).GetPosts), ctx, filter)
}

// GetPostsByFilter mocks base method.
func (m *MockpostService) GetPostsByFilter(ctx context.Context, filter model.PostsFilter) ([]model.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostsByFilter", ctx, filter)
	ret0, _ := ret[0].([]model.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostsByFilter indicates an expected call of GetPostsByFilter.
func (mr *MockpostServiceMockRecorder) GetPostsByFilter(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostsByFilter", reflect.TypeOf((*MockpostService)(nil).GetPostsByFilter), ctx, filter)
}

// Subscribe mocks base method.
func (m *MockpostService) Subscribe(ctx context.Context, subscribeInput model.SubscribeInput) (model.SubscribePayload, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", ctx, subscribeInput)
	ret0, _ := ret[0].(model.SubscribePayload)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockpostServiceMockRecorder) Subscribe(ctx, subscribeInput interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockpostService)(nil).Subscribe), ctx, subscribeInput)
}

// MockcommentService is a mock of commentService interface.
type MockcommentService struct {
	ctrl     *gomock.Controller
	recorder *MockcommentServiceMockRecorder
}

// MockcommentServiceMockRecorder is the mock recorder for MockcommentService.
type MockcommentServiceMockRecorder struct {
	mock *MockcommentService
}

// NewMockcommentService creates a new mock instance.
func NewMockcommentService(ctrl *gomock.Controller) *MockcommentService {
	mock := &MockcommentService{ctrl: ctrl}
	mock.recorder = &MockcommentServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockcommentService) EXPECT() *MockcommentServiceMockRecorder {
	return m.recorder
}

// CreateComment mocks base method.
func (m *MockcommentService) CreateComment(ctx context.Context, comment model.CreateCommentInput) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateComment", ctx, comment)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateComment indicates an expected call of CreateComment.
func (mr *MockcommentServiceMockRecorder) CreateComment(ctx, comment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComment", reflect.TypeOf((*MockcommentService)(nil).CreateComment), ctx, comment)
}

// GetComments mocks base method.
func (m *MockcommentService) GetComments(ctx context.Context, filter model.CommentsFilter) ([]model.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComments", ctx, filter)
	ret0, _ := ret[0].([]model.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetComments indicates an expected call of GetComments.
func (mr *MockcommentServiceMockRecorder) GetComments(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComments", reflect.TypeOf((*MockcommentService)(nil).GetComments), ctx, filter)
}

// GetCommentsByAuthorID mocks base method.
func (m *MockcommentService) GetCommentsByAuthorID(ctx context.Context, authorID string) ([]model.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommentsByAuthorID", ctx, authorID)
	ret0, _ := ret[0].([]model.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommentsByAuthorID indicates an expected call of GetCommentsByAuthorID.
func (mr *MockcommentServiceMockRecorder) GetCommentsByAuthorID(ctx, authorID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommentsByAuthorID", reflect.TypeOf((*MockcommentService)(nil).GetCommentsByAuthorID), ctx, authorID)
}

// GetReplies mocks base method.
func (m *MockcommentService) GetReplies(ctx context.Context, commentID string) ([]model.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReplies", ctx, commentID)
	ret0, _ := ret[0].([]model.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReplies indicates an expected call of GetReplies.
func (mr *MockcommentServiceMockRecorder) GetReplies(ctx, commentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReplies", reflect.TypeOf((*MockcommentService)(nil).GetReplies), ctx, commentID)
}
